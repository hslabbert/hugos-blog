<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.Net on Hugo&#39;s Blog</title>
    <link>http://blog.slabnet.com/tags/.net/</link>
    <description>Recent content in .Net on Hugo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Hugo Slabbert. &lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;Some rights reserved&lt;/a&gt;. Please attribute properly and link back.</copyright>
    <lastBuildDate>Tue, 25 Mar 2008 05:28:20 +0000</lastBuildDate>
    
	<atom:link href="http://blog.slabnet.com/tags/.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Find Disabled and Inactive User and Computer Accounts using Powershell - Part II</title>
      <link>http://blog.slabnet.com/post/find-disabled-and-inactive-user-and-computer-accounts-using-powershell-part2/</link>
      <pubDate>Tue, 25 Mar 2008 05:28:20 +0000</pubDate>
      
      <guid>http://blog.slabnet.com/post/find-disabled-and-inactive-user-and-computer-accounts-using-powershell-part2/</guid>
      <description>Part I demonstrated how to find aged or inactive accounts, and in Part II we will look at another lingering account type: disabled accounts.
Like inactive accounts, Directory Searchers also come in handy for disabled accounts. We can also, however, read an Active Directory account&amp;rsquo;s status directly from a hidden attribute on the ADSI object. Let&amp;rsquo;s start with the Directory Searcher method. This entry also draws from Bahramâ€™s Blog. The code:</description>
    </item>
    
    <item>
      <title>Find Disabled and Inactive User and Computer Accounts using Powershell - Part I</title>
      <link>http://blog.slabnet.com/post/find-disabled-and-inactive-user-and-computer-accounts-using-powershell-part1/</link>
      <pubDate>Tue, 25 Mar 2008 05:28:15 +0000</pubDate>
      
      <guid>http://blog.slabnet.com/post/find-disabled-and-inactive-user-and-computer-accounts-using-powershell-part1/</guid>
      <description>We&amp;rsquo;ll start off with Inactive accounts first, and then work on the disabled accounts after that.
Active Directory in Server 2003 has a nice user/computer attribute called lastLogonTimeStamp that can help us keep track of inactive accounts. If you have ever tried to use that attribute, however, you might have come up with something like this&amp;hellip;
PoSH&amp;gt; $struserdn = &amp;quot;CN=Some User,OU=Users,OU=Corp,DC=yourdomain,DC=local&amp;quot; PoSH&amp;gt; $adobjuser = [ADSI]&amp;quot;LDAP://$struserdn&amp;quot; PoSH&amp;gt; $adobjuser {CN=Some User,OU=Users,OU=Corp,DC=yourdomain,DC=local}
PoSH&amp;gt; $adobjuser.</description>
    </item>
    
    <item>
      <title>Bulk Rename Files with Sequential Index</title>
      <link>http://blog.slabnet.com/post/bulk-rename-files-with-sequential-index/</link>
      <pubDate>Sun, 23 Mar 2008 06:31:17 +0000</pubDate>
      
      <guid>http://blog.slabnet.com/post/bulk-rename-files-with-sequential-index/</guid>
      <description>I am pretty sure I&amp;rsquo;m not the only one who wants something more descriptive than DSC1900298.JPG to name my digital photos. And yes, I know that Windows Explorer allows you to rename pictures en masse, but I don&amp;rsquo;t like the convention they have chosen in that the first file is named [common name].JPG, then the subsequent files are named common name.JPG and so on and so forth.
I had a few requirements for how I wanted to go about this:</description>
    </item>
    
    <item>
      <title>Take ownership of files and folders through script</title>
      <link>http://blog.slabnet.com/post/take-ownership-of-files-and-folders-through-script/</link>
      <pubDate>Sun, 23 Mar 2008 04:41:48 +0000</pubDate>
      
      <guid>http://blog.slabnet.com/post/take-ownership-of-files-and-folders-through-script/</guid>
      <description>As part of our process to disable user accounts, we take ownership of the user&amp;rsquo;s server-stored documents such as roaming profiles and redirected My Documents directories. We then either keep access restricted to the domain admins group or grant access to a replacement user who should receive access to the departed user&amp;rsquo;s files.
With an upgrade to Exchange 2007, we have taken advantage of the Powershell access to Exchange objects, and have scripted the mailbox provisioning and account disable processes.</description>
    </item>
    
    <item>
      <title>Resize VHD Files</title>
      <link>http://blog.slabnet.com/post/resize-vhd-files/</link>
      <pubDate>Wed, 23 Jan 2008 05:13:27 +0000</pubDate>
      
      <guid>http://blog.slabnet.com/post/resize-vhd-files/</guid>
      <description>This topic has been covered a bit (here, here, and here, for instance) but I have been working on a project that utilizes Virtual Server for testing, and it came up again. A consultant that was working on the VM&amp;rsquo;s in question apparently struggled for quite some time before he asked for help on it. So, I thought I would see if another post on this might help someone out.</description>
    </item>
    
    <item>
      <title>Modifying Group Memberships with Powershell, Part II</title>
      <link>http://blog.slabnet.com/post/modifying-group-memberships-with-powershell-part-2/</link>
      <pubDate>Sat, 19 Jan 2008 23:30:35 +0000</pubDate>
      
      <guid>http://blog.slabnet.com/post/modifying-group-memberships-with-powershell-part-2/</guid>
      <description>I had hoped to put this all in one post, but the thing would have gone on forever! Part I covered some basics in copying group memberships to an Active Directory user from another user, such as a template account, using Powershell. Part II will delve into my misadventures in gaining more control of user group memberships, including removing users from a group either by editing the group&amp;rsquo;s attributes or editing the user&amp;rsquo;s attributes.</description>
    </item>
    
    <item>
      <title>Modifying Group Memberships with Powershell, Part I</title>
      <link>http://blog.slabnet.com/post/modifying-group-memberships-with-powershell-part-1/</link>
      <pubDate>Sat, 19 Jan 2008 19:03:40 +0000</pubDate>
      
      <guid>http://blog.slabnet.com/post/modifying-group-memberships-with-powershell-part-1/</guid>
      <description>I recently had to spend hours figuring out how to properly modify Active Directory group memberships using Powershell. Some of the .Net methods have not yet been implemented, so I had to get a bit tricky with it. I could find the various bits of information I needed in various places, so I hope that collecting them here in one place is of some use to others.
The scenario was that I needed to disable user accounts in a Windows Server 2003 Active Directory environment running with Exchange 2007.</description>
    </item>
    
  </channel>
</rss>